{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the UPPMAX AWK course","text":"<p>This course introduces the foundations of the AWK programming language.</p> <ul> <li>Get started!</li> </ul>"},{"location":"afternoon_session/basic_linux/","title":"Basic Linux","text":"<p>Learning outcomes</p> <ul> <li>Practice some basic Linux commands: <code>echo</code>, <code>printf</code>, <code>cat</code>, <code>wc</code>, <code>rev</code></li> <li>Practice with Linux pipes</li> <li>Use the output of one process as the input for <code>awk</code></li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>The learners have practiced with UNIX pipes</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"afternoon_session/basic_linux/#overview","title":"Overview","text":"<p>Most UNIX (i.e. Linux and MacOS) distributions includes <code>awk</code> as it is a tool that is part of a common standard for what operating systems should have. The UPPMAX clusters, running Linux, also have <code>awk</code>.</p> <p>Here we discuss the most relevant Linux programs and terms.</p> <pre><code>flowchart TD\n\n  subgraph basic_linux[Basic Linux]\n    awk\n    pipes\n    echo\n    printf\n    stdin\n    files[Files]\n    input[Input]\n    cat\n    editor[Text editor]\n    wc\n    rev\n    tr\n  end\n\n  %% Basic Linux\n  stdin --&gt; |need to know| pipes\n  printf --&gt; |need to know| echo\n  pipes --&gt; |need to know| printf\n  files --&gt; |need to know| cat\n  files --&gt; |need to know| editor\n  files --&gt; |a type of| input\n  stdin --&gt; |a type of| input\n  awk --&gt; |reads| input</code></pre>"},{"location":"afternoon_session/basic_linux/#exercises","title":"Exercises","text":"<p>See the exercise procedure.</p>"},{"location":"afternoon_session/basic_linux/#exercise-1-echo","title":"Exercise 1: <code>echo</code>","text":"<p>Learning outcomes</p> <ul> <li>Use <code>echo</code></li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about page on 'echo'</li> </ul> <p>Do, in a terminal:</p> <ul> <li><code>man echo</code></li> <li><code>echo hello</code></li> <li><code>echo hello world</code></li> <li><code>echo hello\\nworld</code></li> <li><code>echo hello\\\\nworld</code></li> <li><code>echo -e hello\\nworld</code></li> <li><code>echo -e hello\\\\nworld</code></li> <li><code>echo \"Hello world\"</code></li> <li><code>echo -e \"Hello\\\\nworld\"</code></li> <li><code>echo -e 'Hello\\\\nworld'</code></li> </ul> <p>Answer the following questions:</p> <ul> <li><code>echo</code> can create output that spans multiple lines yes/no</li> <li>When putting a newline in a string,   the type of quotes (i.e. single or double) matters yes/no</li> </ul> <p>Express in your own words: what does <code>echo</code> do?</p>"},{"location":"afternoon_session/basic_linux/#exercise-2-printf","title":"Exercise 2: <code>printf</code>","text":"<p>Learning outcomes</p> <ul> <li>Use <code>printf</code></li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about page on 'printf'</li> </ul> <p>Do, in a terminal:</p> <ul> <li><code>man printf</code></li> <li><code>printf hello</code></li> <li><code>printf hello\\n</code></li> <li><code>printf hello\\\\n</code></li> <li><code>printf hello world</code></li> <li><code>printf hello\\nworld</code></li> <li><code>printf hello\\\\nworld</code></li> <li><code>printf -e hello\\nworld</code></li> <li><code>printf -e hello\\\\nworld</code></li> <li><code>printf \"Hello world\"</code></li> <li><code>printf -e \"Hello\\\\nworld\"</code></li> <li><code>printf -e 'Hello\\\\nworld'</code></li> </ul> <p>Answer the following questions:</p> <ul> <li><code>printf</code> can create output that spans multiple lines yes/no</li> <li>When putting a newline in a string,   the type of quotes (i.e. single or double) matters yes/no</li> </ul> <p>Express in your own words: what does <code>printf</code> do?</p>"},{"location":"afternoon_session/basic_linux/#exercise-3-cat","title":"Exercise 3: <code>cat</code>","text":"<p>Learning outcomes</p> <ul> <li>Use <code>cat</code></li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about page on 'cat'</li> </ul> <p>Do:</p> <ul> <li>create a file called <code>why_awk.txt</code> with the following content   (from   this post from the AWK archives   ):</li> </ul> why_awk.txt<pre><code> \"The Enlightened Ones say that....\n\n    You should never use C if you can do it with a script;\n    You should never use a script if you can do it with awk;\n    Never use awk if you can do it with sed;\n    Never use sed if you can do it with grep.\"\n</code></pre> <p>Then, in a terminal, in the same folder as <code>why_awk.txt</code>, do:</p> <ul> <li><code>man cat</code></li> <li><code>cat why_awk.txt</code></li> <li><code>cat -b why_awk.txt</code></li> <li><code>cat -n why_awk.txt</code></li> </ul> <p>Express in your own words: what does <code>cat</code> do?</p>"},{"location":"afternoon_session/basic_linux/#exercise-4-wc","title":"Exercise 4: <code>wc</code>","text":"<p>Learning outcomes</p> <ul> <li>Use <code>wc</code></li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about page on 'wc'</li> </ul> <p>Then, in a terminal, do:</p> <ul> <li><code>man wc</code></li> <li><code>wc why_awk.txt</code></li> </ul> <p>Express in your own words: what does <code>wc</code> do?</p>"},{"location":"afternoon_session/basic_linux/#exercise-5-a-unix-pipeline","title":"Exercise 5: a UNIX pipeline","text":"<p>Learning outcomes</p> <ul> <li>Use a pipeline</li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about a UNIX pipeline</li> </ul> <p>The pipe symbol <code>|</code> is used in a UNIX pipeline.</p> <p>Do, in a terminal:</p> <ul> <li><code>echo hello world | rev</code></li> <li><code>echo hello world | rev | rev</code></li> <li><code>cat why_awk.txt | wc</code></li> <li><code>cat why_awk.txt | rev</code></li> <li><code>cat why_awk.txt | wc | rev</code></li> <li><code>cat -n why_awk.txt | rev</code></li> <li><code>rev --version | rev</code></li> </ul> <p>Express in your own words: what does the pipe symbol <code>|</code> do?</p>"},{"location":"afternoon_session/overview/","title":"AWK course","text":"<p>This module introduces the fundamentals of the AWK language.</p> <p>Content</p> <p>This is the teaching material for the UPPMAX AWK course.</p> <p>This repository is based on the material of https://pmitev.github.io/to-awk-or-not/ and puts it into teaching cycles.</p>"},{"location":"afternoon_session/overview/#schedule","title":"Schedule","text":"Time Topic 13:15-14:00 Regular expressions 14:00-14:15 Break 14:15-15:00 What is AWK, Basic Linux 15:00-16:00 Break 15:15-16:00 Related tools <p>The times in this schedules are only guidelines. The pace of the learners determines the speed of going through the course material.</p> <p>Extra material:</p> <ul> <li>Built-in functions</li> <li>Record separators</li> <li>In-place file editing</li> <li>Multiple-file input</li> </ul>"},{"location":"afternoon_session/overview/#overview","title":"Overview","text":""},{"location":"afternoon_session/overview/#facets-of-awk","title":"Facets of AWK","text":"<pre><code>flowchart TD\n\n  print[Print]\n  filtering_on_values[Filtering on values]\n  begin_and_end[BEGIN and END]\n  variables[Variables]\n  associative_arrays[Associative arrays]\n  filtering_on_regex[Filtering on regular expressions]\n  comma_as_separator[Comma as a separator]\n\n  %% Facets of AWK\n  filtering_on_values --&gt; |needs| print\n  comma_as_separator --&gt; |needs| print\n  begin_and_end --&gt; |needs| filtering_on_values\n  variables --&gt; |needs| begin_and_end\n  associative_arrays --&gt; |needs| variables\n  filtering_on_regex --&gt; |needs| filtering_on_values</code></pre>"},{"location":"afternoon_session/overview/#awk-as-a-programming-language","title":"AWK as a programming language","text":"<pre><code>flowchart TD\n\n    %% Give a white background to all nodes, instead of a transparent one\n    %% classDef node fill:#fff,color:#000,stroke:#000\n    classDef focus_node fill:#fff,color:#000,stroke-width:4px\n\n    subgraph interpreters[Interpreters]\n    awk\n    gawk\n    gnu_awk[GNU Awk]\n    interpreter\n    end\n\n    subgraph programming_languages[Programming languages]\n\n      subgraph compiled_languages[Compiled languages]\n        compiled_language[Compiled language]\n      end\n\n      subgraph interpreted_languages[Interpreted languages]\n        interpreted_language[Interpreted language]\n        AWK:::focus_node\n      end\n    end\n\n    interpreted_language --&gt; |is run by| interpreter\n    interpreted_language &lt;--&gt; |is not| compiled_language\n    awk --&gt; |is a| interpreter\n    gawk --&gt; |is a| interpreter\n    gawk --&gt; |is an abbreviation of| gnu_awk\n\n    AWK --&gt; |is a| interpreted_language\n</code></pre>"},{"location":"afternoon_session/overview/#awk-and-its-friends","title":"AWK and its friends","text":"<pre><code>flowchart TD\n\n  classDef focus_node fill:#fff,color:#000,stroke-width:4px\n\n  awk:::focus_node\n  cut\n  grep\n  sed\n  tr\n  wc\n\n  regexps[Regular expressions]\n  split_data_in_columns[Split data into columns]\n  count[Count]\n  replace[Replace]\n\n  %% Tools\n  awk --&gt; |can do| regexps\n  sed --&gt; |can do| regexps\n  grep --&gt; |can do| regexps\n\n  awk --&gt; |can do| split_data_in_columns\n  cut --&gt; |can do| split_data_in_columns\n\n  awk --&gt; |can do| count\n  wc --&gt; |can do| count\n\n  awk --&gt; |can do| replace\n  tr --&gt; |can do| replace\n  sed --&gt; |can do| replace</code></pre>"},{"location":"afternoon_session/overview/#links","title":"Links","text":"<ul> <li>CLI text processing with GNU awk:   a book we use</li> <li>To awk or not: course material we use</li> <li>AWK cheat sheet</li> </ul>"},{"location":"afternoon_session/regexps/","title":"Regular expressions","text":"<p>Learning outcomes</p> <ul> <li>Practice regular expressions</li> <li>Use two online websites to practice using regular expressions</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>The learners have practiced with some regular expressions</li> <li>The learners have used some online websites to learn regular expressions</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"afternoon_session/regexps/#overview","title":"Overview","text":"<p>Regular expressions are a used to find patterns in text. It allows one to express concisely how a piece of text looks like.</p> <p>For example:</p> <ul> <li>a common paper size is consists out of a capital A, B or C,   followed by a number from 1 to and including 9,   for example <code>A4</code></li> <li>a Swedish personal identity number   ('personnummer')   before 1980 that is possibly valid consists of 6 digits, a dash, and then 4 digits,   for example <code>890201-3286</code></li> <li>A blood group is A or B or AB or O, with a plus or minus added for the Rhesus factor,   for example <code>AB+</code></li> </ul> <p>Knowing regular expressions allows us to search for patterns in a text.</p>"},{"location":"afternoon_session/regexps/#exercises","title":"Exercises","text":"<p>See the exercise procedure.</p>"},{"location":"afternoon_session/regexps/#exercise-1-practice-regular-expressions","title":"Exercise 1: practice regular expressions","text":"<p>Learning outcomes</p> <ul> <li>Practice the basics of regular expressions</li> </ul> <p>Browse to https://regexlearn.com and do exercises 1 to and including 16.</p>"},{"location":"afternoon_session/regexps/#exercise-2-practice-regular-expressions-with-regex101com","title":"Exercise 2: practice regular expressions with <code>regex101.com</code>","text":"<p>Learning outcomes</p> <ul> <li>Use a character class</li> </ul> <p>A website like used in the previous exercise is useful for learning, but this is an AWK course, hence we only look for a way to work with regular expressions.</p> <ul> <li>Browse to https://regex101.com/ and find in the quick reference   the character class for a single character 'a, b or c'</li> <li>Try out this website: copy the text from 'Three-letter words ending with 'at''   as is shown below. Use a character class to select all animals</li> </ul> Three-letter words ending with 'at'<pre><code>sat\neat\nfat\npat\ncat\nhat\nbat\nrat\nvat\nmat\ntat\noat\nwat\nlat\ngat\nkat\nqat\n</code></pre> <p>From https://www.thefreedictionary.com/words-that-end-in-at</p>"},{"location":"afternoon_session/regexps/#exercise-3-practice-regular-expressions-with-regextestercom","title":"Exercise 3: practice regular expressions with <code>regextester.com</code>","text":"<p>Learning outcomes</p> <ul> <li>Use a word anchor</li> </ul> <p>Here is another website to practice with regular expressions:</p> <ul> <li>Browse to https://www.regextester.com/   to find a so-called 'anchor' for the end of the string</li> <li>Try out this website:   copy the text from 'Seven-letter words containing the word 'book''   as is shown below. Use a word anchor to select all words ending with 'book'</li> </ul> Seven-letter words containing the word 'book'<pre><code>booking\nbooklet\nbookman\nbookish\nlogbook\nbookend\ndaybook\nnonbook\nlawbook\nrebooks\nprebook\nbookful\nbookies\nbookers\nbookmen\nbookoos\n</code></pre> <p>From https://www.thefreedictionary.com/words-containing-book</p>"},{"location":"afternoon_session/regexps/#exercise-4-confirming-things-are-true","title":"Exercise 4: confirming things are true","text":"<p>Learning outcomes</p> <ul> <li>experience the regular expressions in AWK</li> </ul>"},{"location":"afternoon_session/regexps/#download-the-data","title":"Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://github.com/devstronomy/nasa-data-scraper/raw/master/data/csv/satellites.csv\n</code></pre> <p>to download a file called <code>satellites.csv</code>.</p> <p>This file is a comma-separated file about the planets and satellites in our solar system.</p> <p>The dataset has the following columns:</p> index name 1 <code>planet</code> 2 <code>name</code> 3 <code>gm</code> 4 <code>radius</code> 5 <code>density</code> 6 <code>magnitude</code> 7 <code>albedo</code> <p>We do not need to know what all these things mean.</p>"},{"location":"afternoon_session/regexps/#match-a-column-element","title":"match a column element","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk -F \",\" '$2 ~ /on/ { print $0 } ' satellites.csv\n</code></pre> <p>In English, this is: 'For all lines of which the second column matches the regex <code>on</code>, show the whole line. Assume that the file uses a comma as a field separator'.</p> <p>Confirm that this is true.</p>"},{"location":"afternoon_session/regexps/#match-with-a-sentence-with-explicit-0","title":"match with a sentence with explicit <code>$0</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk -F \",\" '$0 ~ /rth/ { print $0 } ' satellites.csv\n</code></pre> <p>In English, this is: 'For all lines of which the whole line matches the regex <code>rth</code>, show the whole line. Assume that the file uses a comma as a field separator'.</p> <p>Confirm that this is true.</p>"},{"location":"afternoon_session/regexps/#match-with-a-sentence-with-an-implicit-0","title":"match with a sentence with an implicit <code>$0</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk -F \",\" '/rth/ { print $0 } ' satellites.csv\n</code></pre> <p>In English, this is: 'For all lines of which the whole line matches the regex <code>rth</code>, show the whole line. Assume that the file uses a comma as a field separator'.</p> <p>Confirm that this is true.</p>"},{"location":"afternoon_session/regexps/#explore-the-data","title":"Explore the data","text":"<p>Using <code>awk</code> only:</p> <ul> <li>find all the satellites that contain <code>ir</code></li> <li>find all the satellites that end with <code>ir</code></li> <li>find all the satellites that end with <code>on</code> without a vowel (i.e. <code>aeoui</code>)   before <code>on</code>. For example: <code>moon</code> is invalid, as it has the vowel <code>o</code> before <code>on</code></li> <li>find all the satellites with a number</li> </ul> <p>Think:</p> <ul> <li>There are two ways to look for regex matches on a whole sentence   (<code>$0 ~ /my_regex/</code> and <code>/my_regex/</code>). Why is it useful to know   both ways?</li> </ul>"},{"location":"afternoon_session/related_tools/","title":"Related tools","text":"<p>Learning outcomes</p> <ul> <li>Hear about the tools similar to <code>awk</code></li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Show the tools similar to <code>awk</code></li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>? mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"afternoon_session/related_tools/#overview","title":"Overview","text":"<p>In this session, we learn about the Linux tools related to <code>awk</code>.</p> <pre><code>flowchart TD\n\n  classDef focus_node fill:#fff,color:#000,stroke-width:4px\n\n  awk:::focus_node\n  cut\n  grep\n  sed\n  tr\n  wc\n\n  regexps[Regular expressions]\n  split_data_in_columns[Split data into columns]\n  count[Count]\n  replace[Replace]\n\n  %% Tools\n  awk --&gt; |can do| regexps\n  sed --&gt; |can do| regexps\n  grep --&gt; |can do| regexps\n\n  awk --&gt; |can do| split_data_in_columns\n  cut --&gt; |can do| split_data_in_columns\n\n  awk --&gt; |can do| count\n  wc --&gt; |can do| count\n\n  awk --&gt; |can do| replace\n  tr --&gt; |can do| replace\n  sed --&gt; |can do| replace</code></pre> Tool Regular expressions Split data into columns Replace Count <code>awk</code> Yes Yes Yes Yes <code>cut</code> No Yes No No <code>grep</code> Yes No No Yes <code>sed</code> Yes Yes Yes Yes <code>tr</code> No No Yes No <code>wc</code> No No No Yes <p>An overview what tools can do by themselves.</p> <p>Note that most tools are not intended to do all by themselves. Instead, they are intended to do one thing well and be part of pipelines.</p>"},{"location":"afternoon_session/related_tools/#exercises","title":"Exercises","text":"<p>See the exercise procedure.</p>"},{"location":"afternoon_session/related_tools/#exercise-1-cut","title":"Exercise 1: <code>cut</code>","text":"<p>Learning outcomes</p> <ul> <li>Use <code>cut</code></li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about page on 'cut'</li> </ul> <p>In a terminal, do:</p> <pre><code>wget https://raw.githubusercontent.com/richelbilderbeek/awk_course/master/data/diamonds_raw.csv\n</code></pre> <p>to download a file called <code>diamonds_raw.csv</code>.</p> <p>Then, in a terminal, do:</p> <ul> <li><code>man cut</code></li> <li><code>cut -d \",\" -f 2 diamonds_raw.csv</code></li> <li><code>cat diamonds_raw.csv | cut -d \",\" -f 2</code></li> </ul> <p>Express in your own words: what does <code>cut</code> do?</p>"},{"location":"afternoon_session/related_tools/#exercise-2-grep","title":"Exercise 2: <code>grep</code>","text":"<p>Learning outcomes</p> <ul> <li>Use <code>grep</code></li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about page on 'grep'</li> </ul> <p>In a terminal, do:</p> <pre><code>wget https://github.com/devstronomy/nasa-data-scraper/raw/master/data/csv/satellites.csv\n</code></pre> <p>to download a file called <code>satellites.csv</code>.</p> <p>Then, in a terminal, do:</p> <ul> <li><code>man cut</code></li> <li><code>grep om satellites.csv</code></li> <li><code>cat satellites.csv | grep [^aeiou]om</code></li> </ul> <p>Express in your own words: what does <code>grep</code> do?</p>"},{"location":"afternoon_session/related_tools/#exercise-3-sed","title":"Exercise 3: <code>sed</code>","text":"<p>Learning outcomes</p> <ul> <li>Use <code>sed</code></li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about page on 'sed'</li> </ul> <p>In a terminal, do:</p> <pre><code>wget https://www.gutenberg.org/cache/epub/1787/pg1787.txt\n</code></pre> <p>to download a file called <code>pg1787.txt</code>.</p> <p>Then, in a terminal, do:</p> <ul> <li><code>man sed</code></li> <li><code>sed 's/Hamlet/Frederik X/g' pg1787.txt</code></li> <li><code>sed 's/Hamlet/Frederik X/g' pg1787.txt | awk '/Frederik X/'</code></li> <li><code>sed 's/Hamlet/Frederik X/' pg1787.txt | awk '/Frederik X/'</code></li> </ul> <p>Express in your own words: what does <code>sed</code> do?</p>"},{"location":"afternoon_session/related_tools/#exercise-4-tr","title":"Exercise 4: <code>tr</code>","text":"<p>Learning outcomes</p> <ul> <li>Use <code>tr</code></li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about page on 'tr'</li> </ul> <p>Then, in a terminal, do:</p> <ul> <li><code>man tr</code></li> <li><code>echo \"Hello\" | tr -s e a</code></li> <li><code>echo \"Hello\" | tr -d e</code></li> <li><code>echo \"Hello world\" | tr -d aeiou</code></li> </ul> <p>Express in your own words: what does <code>tr</code> do?</p>"},{"location":"afternoon_session/related_tools/#exercise-5-wc","title":"Exercise 5: <code>wc</code>","text":"<p>Learning outcomes</p> <ul> <li>Use <code>wc</code></li> </ul> <p>Read:</p> <ul> <li>The top part of the Wikipedia about page on 'wc'</li> </ul> <p>In a terminal, do:</p> <pre><code>wget https://www.gutenberg.org/cache/epub/1787/pg1787.txt\n</code></pre> <p>to download a file called <code>pg1787.txt</code>.</p> <p>Then, in a terminal, do:</p> <ul> <li><code>man sed</code></li> <li><code>wc pg1787.txt</code></li> <li><code>wc pg1787.txt --lines</code></li> <li><code>wc pg1787.txt --words</code></li> <li><code>awk '/Hamlet/' pg1787.txt | wc --lines</code></li> </ul> <p>Express in your own words: what does <code>wc</code> do?</p>"},{"location":"afternoon_session/what_is_awk/","title":"What is AWK","text":"<p>Learning outcomes</p> <ul> <li>to understand what AWK is</li> <li>to understand the difference between AWK and Awk and <code>awk</code></li> <li>to learn when to use AWK</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>The learners get an idea what AWK is</li> <li>The learners connect AWK with something they know</li> <li>The learners know the difference between the words AWK, Awk and <code>awk</code></li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"afternoon_session/what_is_awk/#overview","title":"Overview","text":"<p>In this session, we get a first idea what AWK is.</p> <p>AWK is a interpreted programming language, that processes tabular data.</p>"},{"location":"afternoon_session/what_is_awk/#exercises","title":"Exercises","text":"<p>See the exercise procedure.</p>"},{"location":"afternoon_session/what_is_awk/#exercise-1-what-is-awk","title":"Exercise 1: what is AWK?","text":"<p>Learning outcomes</p> <ul> <li>to understand what AWK is</li> <li>to understand the difference between AWK and Awk and <code>awk</code></li> </ul> <p>Scan (i.e. get an idea of its content, not read in detail) the page:</p> <ul> <li>The Wikipedia 'AWK' page</li> </ul> <p>Search the page to determine which of these statements below is true, and why they are true/false:</p> <ul> <li>(1) AWK is a programming language</li> <li>(2) AWK is an interpreted programming language</li> <li>(3) AWK is a compiled programming language</li> <li>(4) AWK works on text files</li> <li>(5) AWK works on images</li> <li>(6) AWK works on <code>.docx</code> files</li> <li>(7) The programming language AWK can be spelled as Awk too</li> <li>(8) The programming language AWK can be spelled as <code>awk</code> too</li> </ul> Solutions <ul> <li>(1) AWK is a programming language</li> </ul> <p>Yes.</p> <ul> <li>(2) AWK is an interpreted programming language</li> </ul> <p>Yes. For example, <code>gawk</code> is an AWK interpreter.</p> <ul> <li>(3) AWK is a compiled programming language</li> </ul> <p>No.</p> <p>However, in the past it was! For example, <code>awka</code> and <code>tawk</code> were AWK compilers. Due to this, most people will say AWK is not a compiled programming language.</p> <p>C, C++, Fortran, Go and Rust are better examples of a compiled programming language.</p> <ul> <li>(4) AWK works on text files</li> </ul> <p>Yes.</p> <ul> <li>(5) AWK works on images</li> </ul> <p>No: AWK works best on text files.</p> <p>However, some image files, such as SVG, are text-based. This means that AWK can work on those images.</p> <ul> <li>(6) AWK works on <code>.docx</code> files</li> </ul> <p>No: AWK works best on text files. A <code>.docx</code> files is zipped, hence has binary data</p> <ul> <li>(7) The programming language AWK can be spelled as Awk too</li> </ul> <p>No. Where 'AWK' means the programming language, 'Awk' is used in a context with something else. For example, 'GNU Awk' is the name for the GNU implementation of AWK. As GNU Awk is the most used AWK interpreter, it is sometimes called Awk (i.e. without 'GNU' in front of it). In that case too, 'Awk' is the name of the interpreter, not the language.</p> <ul> <li>(8) The programming language AWK can be spelled as <code>awk</code> too</li> </ul> <p>No. Where 'AWK' means the programming language, <code>awk</code> is the name of a program called <code>awk</code>, which is an AWK interpreter</p> <p>This graph puts it all into an overview:</p> <pre><code>flowchart TD\n\n    %% Give a white background to all nodes, instead of a transparent one\n    %% classDef node fill:#fff,color:#000,stroke:#000\n    classDef focus_node fill:#fff,color:#000,stroke-width:4px\n\n\n    subgraph interpreters[Interpreters]\n    awk\n    gawk\n    gnu_awk[GNU Awk]\n    interpreter\n    end\n\n    subgraph programming_languages[Programming languages]\n\n      subgraph compiled_languages[Compiled languages]\n        compiled_language[Compiled language]\n        C\n        Cpp[C++]\n        Fortran\n        Go\n        Rust\n      end\n\n      subgraph interpreted_languages[Interpreted languages]\n        interpreted_language[Interpreted language]\n        Julia\n        Python\n        R\n        AWK:::focus_node\n      end\n    end\n\n    interpreted_language --&gt; |is run by| interpreter\n    interpreted_language &lt;--&gt; |is not| compiled_language\n    awk --&gt; |is a| interpreter\n    gawk --&gt; |is a| interpreter\n    gawk --&gt; |is an abbreviation of| gnu_awk\n\n    Julia --&gt; |is a| interpreted_language\n    Python --&gt; |is a| interpreted_language\n    R --&gt; |is a| interpreted_language\n    AWK --&gt; |is a| interpreted_language\n\n    C --&gt; |is a| compiled_language\n    Cpp --&gt; |is a| compiled_language\n    Fortran --&gt; |is a| compiled_language\n    Go --&gt; |is a| compiled_language\n    Rust --&gt; |is a| compiled_language</code></pre>"},{"location":"afternoon_session/what_is_awk/#links","title":"Links","text":"<ul> <li>Book: CLI text processing with GNU awk</li> </ul>"},{"location":"misc/exercise_procedure/","title":"Exercise procedure","text":"For teachers: why this setup? <p>Ideally, both learners have a camera and microphone on</p> <p>This allows for a learning environment that is engaging and where discussion can take place easily.</p> <p>You will be put into Zoom Breakout rooms, in random pairs.</p> <p>This assures everyone learns effectively: pairs are optimal.</p> <p>Ideally, all do the exercises on their computer, yet derive at a shared answer</p> <p>This assures everyone can give a answer that is not personal.</p> <p>One should commonly share screens</p> <p>Encourage teaching and learning.</p> <p>There is no silent room.</p> <p>There is no silent room, as:</p> <ul> <li>(1) working in pairs allows 'Think, Pair, Share' to work;   answering is not personal anymore,</li> <li>(2) getting the experienced learners to teach makes them learn too,</li> <li>(3) this does not work well with Zoom assigning random pairs,</li> <li>(4) this is not designed to be a self-study course</li> </ul> <p>When done with the exercises, go back to the main room</p> <p>This helps set the pace of the course.</p> <p>Learners that are done will be asked to try to help the remaining working learners, by joining their breakout rooms</p> <p>This helps wisdom to spread.</p> <p>The majority of learners is keen to help out directly.</p> <p>The majority of the remaining learners feel not knowledgeable enough to help out, but is keen to try to help out. Remind these learners they are here to learn, and not to already know to content.</p> <p>When two-thirds of the learners are in the main room, all break-out rooms will be closed ruthlessly</p> <p>The parameter value two-thirds is picked as it means that most learners have arrived at the answer. The hope is that the members of a slower pair in one iteration will catch up when paired up with other learners.</p> <p>Closing breakout rooms is not ultra-ruthless: learners still have 1 minute left. But it is a simple and ruthless rule.</p> <p>Breaks are always on the scheduled time. You will be reminded in that chat</p> <p>Breaks are important.</p> <p>Take that break, either in the main room or in your breakout room. The breakout rooms will not be closed</p> <p>Do not disrupt the flow (even more) by closing the breakout rooms.</p> <p>In the main room, random learners will be asked questions regarding those exercises. Say the answer you agreed upon as a group (i.e. not your personal answer!)</p> <p>This is form is described as 'Think, Pair, Share' in 'The Fundamentals of Teaching' by Mike Bell</p> For teachers: breakout room visit policy <p>The goal of visiting the breakout room, is to ensure there is a learning environment. Try to disturb as little as possible. Avoid to lecture and avoid to correct the learners, as this will make their learning less efficient.</p> <p>If learners are asking a question, coach the learners in finding the answer. Avoid giving a direct answer, as this will make their learning less efficient.</p> <pre><code>flowchart TD\n  question_asked[Learners ask a question?]\n  maybe_answer[Reply, maybe answer the question]\n  how_many_cameras[How many camaras are on?]\n  concentrated[Do the learners appear concentrated?]\n  discussion[Are the learners having a useful discussion?]\n  arguing[Are the learners arguing?]\n  chatting[Are the learners chatting informally?]\n  huh[Then what are they doing?]\n\n  fix[Re-establish learning environment]\n  next[Go to the next breakout room]\n\n  question_asked --&gt; |Yes| maybe_answer\n  question_asked --&gt; |No| how_many_cameras\n  maybe_answer --&gt; |Done| how_many_cameras\n  how_many_cameras --&gt; |Zero or one| next\n  how_many_cameras --&gt; |Two| concentrated\n  concentrated --&gt; |Yes| next\n  concentrated --&gt; |No| discussion\n  discussion --&gt; |Yes| next\n  discussion --&gt; |No| arguing\n  arguing --&gt; |Yes| fix\n  arguing --&gt; |No| chatting\n  chatting --&gt; |Yes| fix\n  chatting --&gt; |No| huh\n  fix --&gt; |Done| next</code></pre> <ul> <li>Ideally, both learners have a camera and microphone on</li> <li>You will be put into Zoom Breakout rooms, in random pairs.</li> <li>There is no silent room.</li> <li>Ideally, all do the exercises on their own computer,   yet derive at a shared answer</li> <li>One should commonly share screens</li> <li>Stuck? You can (1) wait for a teacher to come by,   (2) click on the Zoom option 'Ask for help', or   (3) go to the main room</li> <li>When done with the exercises, go back to the main room</li> <li>Learners that are done will be asked to try to help the remaining working learners,   by joining their breakout rooms</li> <li>When two-thirds of the learners are in the main room, all break-out rooms   will be closed ruthlessly.   It still takes 1 minute before the room closes though :-)</li> <li>Breaks are always on the scheduled time. You will be reminded in that chat</li> <li>Take that break, either in the main room or in your breakout room.   The breakout rooms will not be closed</li> <li>In the main room, random learners will be asked questions   regarding those exercises.   Say the answer you agreed upon as a group (i.e. not your personal answer!)</li> </ul> <pre><code>flowchart TD\n  subgraph breakout_room[Your initial breakout room]\n    do_exercise[Do exercises in group]\n    stuck[Wait\\nAsk for help\\nGo the main room]\n    do_exercise &lt;--&gt; |Stuck?| stuck\n  end\n  subgraph main_room[Main room]\n    get_exercise[Get exercises]\n    done_exercise[Done exercises]\n    most_done_exercise[Most have done exercises]\n    closing_breakout_rooms[Closing breakout rooms]\n    feedback[Feedback]\n  end\n  subgraph other_breakout_room[Another breakout room]\n    help_do_exercise[Help do exercises in group]\n  end\n\n  get_exercise --&gt; |clear?| do_exercise\n  do_exercise --&gt; |done!| done_exercise\n  do_exercise --&gt; |breakout rooms close| feedback\n  done_exercise --&gt; |help out| help_do_exercise\n  done_exercise --&gt; |wait| most_done_exercise\n  help_do_exercise --&gt; |done!| done_exercise\n  help_do_exercise --&gt; |breakout rooms close| feedback\n  most_done_exercise --&gt; |many learners in main room| closing_breakout_rooms\n  closing_breakout_rooms --&gt; feedback\n\n  breakout_room ~~~ main_room ~~~ other_breakout_room\n\n  get_exercise ~~~ help_do_exercise\n  do_exercise ~~~ help_do_exercise\n  help_do_exercise ~~~ most_done_exercise</code></pre> <p>Overview of the exercise procedure</p>"},{"location":"misc/exercise_procedure/#questions","title":"Questions","text":"<ul> <li>You are in a breakout room with someone else.   You both do not know what to do.   What went wrong?</li> </ul> Answer <p>Before you are sent to the breakout rooms, it is asked if you know what to do, with the goal of preventing this situation.</p> <p>Try to help the teacher give clear enough instructions next time.</p> <ul> <li>You are in a breakout room with someone else.   You need to install a piece of software,   which takes a couple of minutes of time.   Will you still have enough time for the exercises?</li> </ul> Answer <p>Likely: yes, you will have enough time for the exercises.</p> <p>It is likely you are not the only one that has this problem. The course follows the pace of the learners, hence, we move on to the next session when most learners have finished the exercises</p> <ul> <li>You finished the exercise and are in the main room,   waiting for the course to move on.   You were asked to help in another breakout room,   yet you did not feel comfortable to do so.   What do you do?</li> </ul> Answer <p>These are your options:</p> <ul> <li>Wait</li> <li>Ask questions</li> <li>Read the next session.   Turn of your camera to indicate you need to concentrate</li> </ul> <ul> <li>I am alone in my Zoom breakout room. What do I do?</li> </ul> Answer <p>It is likely a teacher will quickly see this and ruthlessly move you to another breakout room, so waiting is an option.</p> <p>Else, go to the main room.</p>"},{"location":"misc/faq/","title":"AWK course FAQ","text":""},{"location":"misc/faq/#what-is-the-goal-of-this-repository","title":"What is the goal of this repository?","text":"<p>The goal of this repository is to use existing AWK materials and put it into lesson plans.</p>"},{"location":"misc/faq/#which-awk-material-is-used","title":"Which AWK material is used?","text":"<ul> <li>CLI text processing with GNU awk:   a book</li> <li>To awk or not: course material</li> </ul>"},{"location":"misc/faq/#what-determined-which-awk-material-is-used","title":"What determined which AWK material is used?","text":"<p>AWK material is used if it is all of these:</p> <ul> <li>free (as in freedom)</li> <li>online</li> <li>has exercises</li> </ul>"},{"location":"misc/faq/#why-is-this-a-fork-from-the-uppmax-repository","title":"Why is this a Fork from the UPPMAX repository?","text":"<p>Because the current owner does not have all the access rights to work on that repository.</p>"},{"location":"morning_session/associative_arrays/","title":"Associative arrays","text":"<p>Learning outcomes</p> <ul> <li>work with associative arrays</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners work with associative arrays</li> <li>Learners can get the unique elements of a column</li> <li>Learners can make a tally of a column</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"morning_session/associative_arrays/#overview","title":"Overview","text":"<p>In this session, we work with associative arrays. Associative arrays are used in, among others, to find the (unique) values in a column and to create a tally.</p>"},{"location":"morning_session/associative_arrays/#exercises","title":"Exercises","text":"<p>See the exercise procedure.</p>"},{"location":"morning_session/associative_arrays/#exercise-1-confirming-things-are-true","title":"Exercise 1: confirming things are true","text":"<p>Learning outcomes</p> <ul> <li>experience variables</li> </ul>"},{"location":"morning_session/associative_arrays/#11-download-the-data","title":"1.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://raw.githubusercontent.com/richelbilderbeek/awk_course/master/data/diamonds_no_header.tsv\n</code></pre> <p>to download a file called <code>diamonds_no_header.tsv</code>.</p>"},{"location":"morning_session/associative_arrays/#12-write-to-and-read-from-an-associative-array","title":"1.2. Write to and read from an associative array","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk 'BEGIN { counts[\"ideal\"] = 12345 } END { print counts[\"ideal\"] }' diamonds_no_header.tsv\n</code></pre> <p>In English, this is: 'At the start, in the <code>counts</code> array, at element <code>ideal</code>, store the value <code>12345</code>. In the end, if the <code>counts</code> array, show the value at element <code>ideal</code>.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/associative_arrays/#13-get-a-count","title":"1.3. Get a count","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ counts[$2] = counts[$2] + 1 } END { print counts[\"ideal\"] }' diamonds_no_header.tsv\n</code></pre> <p>In English, this is: 'For every line, in the <code>counts</code> array, at the element in the second column, increase the value by one. In the end, if the <code>counts</code> array, show the value at element <code>ideal</code>.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/associative_arrays/#14-get-a-count-again","title":"1.4. Get a count again","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ counts[$2] += 1 } END { print counts[\"ideal\"] }' diamonds_no_header.tsv\n</code></pre> <p>In English, this is: 'For every line, in the <code>counts</code> array, at the element in the second column, increase the value by one. In the end, if the <code>counts</code> array, show the value at element <code>ideal</code>.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/associative_arrays/#15-get-a-count-again-again","title":"1.5. Get a count again again","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ counts[$2]++ } END { print counts[\"ideal\"] }' diamonds_no_header.tsv\n</code></pre> <p>In English, this is: 'For every line, in the <code>counts</code> array, at the element in the second column, increase the value by one. In the end, if the <code>counts</code> array, show the value at element <code>ideal</code>.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/associative_arrays/#16-get-a-count-again-again-again","title":"1.6. Get a count again again again","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ ++counts[$2] } END { print counts[\"ideal\"] }' diamonds_no_header.tsv\n</code></pre> <p>In English, this is: 'For every line, in the <code>counts</code> array, at the element in the second column, increase the value by one. In the end, if the <code>counts</code> array, show the value at element <code>ideal</code>.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/associative_arrays/#17-show-all-elements","title":"1.7. Show all elements","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ counts[$2]++ } END { for (count in counts) print count }' diamonds_no_header.tsv\n</code></pre> <p>In English, this is: 'For every line, in the <code>counts</code> array, at the element in the second column, increase the value by one. In the end, show all elements of the array <code>counts</code>.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/associative_arrays/#18-show-all-values","title":"1.8. Show all values","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ counts[$2]++ } END { for (count in counts) print counts[count] }' diamonds_no_header.tsv\n</code></pre> <p>In English, this is: 'For every line, in the <code>counts</code> array, at the element in the second column, increase the value by one. In the end, of all elements of the array <code>counts</code>, show their values.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/associative_arrays/#19-show-all-elements-and-values","title":"1.9. Show all elements and values","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ counts[$2]++ } END { for (count in counts) print count \": \" counts[count] }' diamonds_no_header.tsv\n</code></pre> <p>In English, this is: 'For every line, in the <code>counts</code> array, at the element in the second column, increase the value by one. In the end, show all elements of the array <code>counts</code> and their respective values.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/associative_arrays/#exercise-2-explore-data","title":"Exercise 2: explore data","text":""},{"location":"morning_session/associative_arrays/#21-download-the-data","title":"2.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://raw.githubusercontent.com/tidyverse/ggplot2/main/data-raw/mpg.csv\n</code></pre> <p>to download a file called <code>mpg.csv.csv</code>.</p> <p>This file is a tab-separated file about diamonds and is part of the <code>ggplot2</code> R package.</p> <ul> <li>Raw data</li> <li>Data description</li> </ul> <p>The dataset has the following columns:</p> Index Column name Description 1 <code>manufacturer</code> manufacturer name 2 <code>model</code> model name 3 <code>displ</code> engine displacement, in litres 4 <code>year</code> year of manufacture 5 <code>cyl</code> number of cylinders 6 <code>trans</code> type of transmission 7 <code>drv</code> the type of drive train, where f = front-wheel drive, r = rear wheel drive, 4 = 4wd 8 <code>cty</code> city miles per gallon 9 <code>hwy</code> highway miles per gallon 10 <code>fl</code> fuel type 11 <code>class</code> type of car"},{"location":"morning_session/associative_arrays/#22-explore-the-data","title":"2.2. Explore the data","text":"<p>Using <code>awk</code> only:</p> <ul> <li>show if the data has a header yes/no</li> <li>show the number of cars in the dataset</li> <li>show the number of columns in the dataset</li> <li>show all the car manufacturers' names</li> <li>per car manufacturer, show the number of cars it produces</li> <li>show the lowest city miles per gallon</li> <li>show the highest city miles per gallon, in city miles per liter.   Assume a gallon, is a US gallon. A US gallon is 3.785411784 liter</li> <li>find the type (i.e. in the last column) of car   that spends the least fuel on the highway</li> <li>imagine you have each of these cars once. You want each of them to   drive one city mile. How much gallons of fuel do you need?</li> <li>imagine you have each of these cars once. You want each of them to   drive one city mile. How much gallons of each type of fuel do you need?</li> </ul> <p>Think:</p> <ul> <li>There are multiple way to increase an element in an array by one.   Why so many? Is there a difference?</li> </ul>"},{"location":"morning_session/begin_and_end/","title":"BEGIN and END","text":"<p>Learning outcomes</p> <ul> <li>be able to do something at the start of an AWK script</li> <li>be able to do something at the end of an AWK script</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners are able to do something at the start of an AWK script</li> <li>Learners are able to do something at the end of an AWK script</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"morning_session/begin_and_end/#overview","title":"Overview","text":"<p>Sometimes one needs to do things before the actual calculation starts. Also, sometimes one needs to do things after the actual calculation has run.</p> <p>Here we do things at the start and end of an AWK script.</p>"},{"location":"morning_session/begin_and_end/#exercises","title":"Exercises","text":"<p>See the exercise procedure.</p>"},{"location":"morning_session/begin_and_end/#exercise-1-confirming-things-are-true","title":"Exercise 1: confirming things are true","text":"<p>Learning outcomes</p> <ul> <li>experience the <code>BEGIN</code> and <code>END</code> blocks</li> </ul>"},{"location":"morning_session/begin_and_end/#11-download-the-data","title":"1.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://pmitev.github.io/to-awk-or-not/data/coins.txt\n</code></pre> <p>to download a file called <code>coins.txt</code>.</p>"},{"location":"morning_session/begin_and_end/#12-begin","title":"1.2. <code>BEGIN</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk 'BEGIN {print \"There I go!\" }' coins.txt\n</code></pre> <p>In English, this is: 'At the start, print 'There I go!''.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/begin_and_end/#13-begin-and-a-print","title":"1.3. <code>BEGIN</code> and a print","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk 'BEGIN {print \"Coin minting years:\" } { print $3 }' coins.txt\n</code></pre> <p>In English, this is: 'At the start, print 'Coin minting years:', then, for every line, print the third column.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/begin_and_end/#14-end","title":"1.4. <code>END</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk 'END {print \"Done!\" }' coins.txt\n</code></pre> <p>In English, this is: 'In the end, print 'Done!''.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/begin_and_end/#15-end-and-a-print","title":"1.5. <code>END</code> and a <code>print</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print $0 } END { print \"Done!\" }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, print the line. In the end, print 'Done!''.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/begin_and_end/#16-begin-and-end-and-a-print","title":"1.6. <code>BEGIN</code> and <code>END</code> and a <code>print</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk 'BEGIN { print \"Start!\" } { print $0 } END { print \"Done!\" }' coins.txt\n</code></pre> <p>In English, this is: 'At the start, print 'Start!'. Then, for every line, print the line. In the end, print 'Done!''.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/begin_and_end/#17-begin-and-end-and-a-condition-and-a-print","title":"1.7. <code>BEGIN</code> and <code>END</code> and a condition and a <code>print</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk 'BEGIN { print \"Start!\" } $1 == \"gold\" { print $0 } END { print \"Done!\" }' coins.txt\n</code></pre> <p>In English, this is: 'At the start, print 'Start!'. Then, for every line, if the first column matches <code>gold</code>, print the line. In the end, print 'Done!''.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/begin_and_end/#exercise-2-explore-data","title":"Exercise 2: explore data","text":"<p>Learning outcomes</p> <ul> <li>practice using the <code>BEGIN</code> and <code>END</code> blocks</li> </ul>"},{"location":"morning_session/begin_and_end/#21-download-the-data","title":"2.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://raw.githubusercontent.com/richelbilderbeek/awk_course/master/data/diamonds.tsv\n</code></pre> <p>to download a file called <code>diamonds.tsv</code>.</p> <p>This file is a tab-separated file about diamonds and is part of the <code>ggplot2</code> R package.</p> <ul> <li>Raw data</li> <li>Data description</li> </ul> <p>The dataset has the following columns:</p> index name description 1 carat weight of the diamond (0.2--5.01) 2 cut quality of the cut (Fair, Good, Very Good, Premium, Ideal) 3 color diamond colour, from D (best) to J (worst) 4 clarity a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best)) 5 depth total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43--79) 6 table width of top of diamond relative to widest point (43--95) 7 price price in US dollars (\\(326--\\)18,823) 8 x length in mm (0--10.74) 9 y width in mm (0--58.9) 10 z depth in mm (0--31.8)"},{"location":"morning_session/begin_and_end/#22-explore-the-data","title":"2.2. Explore the data","text":"<p>Using <code>awk</code> only:</p> <ul> <li>show a text 'Number of lines:', then print the number of lines</li> <li>show a text 'Number of columns:', then print the number of columns</li> <li>show a text 'Header:', then print only the header</li> <li>show a text 'Prices of first five diamonds:',   then print the prices of the first five diamonds, while skipping the header</li> <li>show the line number of the diamonds that have a price below $400 USD,   while skipping the header.   At the end, print \"... those were he cheapest diamonds\"</li> <li>show a text 'Prices (in USD) of diamonds with a fair and worst color:'.   Then show the price of the diamonds that have a fair cut and the worst color,   while skipping the header.   Then show the text 'Done!'</li> </ul> <p>Think:</p> <ul> <li>these practice questions are only about printing.   Could you already guess where <code>BEGIN</code> and <code>END</code>   become more useful?</li> </ul>"},{"location":"morning_session/filtering_on_values/","title":"Filtering on values","text":"<p>Learning outcomes</p> <ul> <li>filter based on column values</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners can filter based on column values</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"morning_session/filtering_on_values/#overview","title":"Overview","text":"<p>AWK is great for selecting elements of tabular data.</p> <p>In this session, we use AWK to select elements in tabular data. Selecting elements, in this case, is also called 'filtering'.</p>"},{"location":"morning_session/filtering_on_values/#exercises","title":"Exercises","text":"<p>See the exercise procedure.</p>"},{"location":"morning_session/filtering_on_values/#exercise-1-confirming-things-are-true","title":"Exercise 1: confirming things are true","text":"<p>Learning outcomes</p> <ul> <li>experience the ways to filter on column values of <code>awk</code></li> </ul>"},{"location":"morning_session/filtering_on_values/#11-download-the-data","title":"1.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://pmitev.github.io/to-awk-or-not/data/coins.txt\n</code></pre> <p>to download a file called <code>coins.txt</code>.</p>"},{"location":"morning_session/filtering_on_values/#12-match-on-equality","title":"1.2. match on equality","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '$1 == \"gold\" { print }' coins.txt\n</code></pre> <p>In English, this is: 'For every line where the first column matches <code>gold</code>, show the whole line'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/filtering_on_values/#13-use-less-then-operator","title":"1.3. use less-then operator","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '$2 &lt; 1.0 { print }' coins.txt\n</code></pre> <p>In English, this is: 'For every line where the second column is less than one, show the whole line'</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/filtering_on_values/#14-show-the-first-line","title":"1.4. show the first line","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk 'NR == 1 { print }' coins.txt\n</code></pre> <p>In English, this is: 'If the line number is one, print the line'</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/filtering_on_values/#15-skip-a-first-line","title":"1.5. skip a first line","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk 'NR &gt; 1 { print }' coins.txt\n</code></pre> <p>In English, this is: 'If the line number is bigger than one, print the line'</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/filtering_on_values/#16-use-operator","title":"1.6. use <code>&amp;&amp;</code> operator","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '$1 == \"gold\" &amp;&amp; $2 &lt; 1.0 { print }' coins.txt\n</code></pre> <p>In English, this is: 'For every line where the first column matches <code>gold</code> and the value in the second column is less than 1.0, show the whole line'</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/filtering_on_values/#17-use-operator","title":"1.7. use <code>||</code> operator","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '$1 == \"gold\" || $2 &lt; 1.0 { print }' coins.txt\n</code></pre> <p>In English, this is: 'For every line where the first column matches <code>gold</code> or the value in the second column is less than 1.0, show the whole line'</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/filtering_on_values/#18-multiple-conditions","title":"1.8. multiple conditions","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '$1 == \"gold\" { print \"Gold:\", $0 } $2 &lt; 1.0  { print \"Light:\" $0 }' coins.txt\n</code></pre> <p>In English, this is: 'For every line where the first column matches <code>gold</code>, print 'Gold:' and the line. For every line where the second column is less than 1.0, print 'Light:' and the line.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/filtering_on_values/#exercise-2-printing","title":"Exercise 2: printing","text":""},{"location":"morning_session/filtering_on_values/#21-download-the-data","title":"2.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://raw.githubusercontent.com/richelbilderbeek/awk_course/master/data/diamonds_no_header.tsv\n</code></pre> <p>to download a file called <code>diamonds_no_header.tsv</code>.</p> <p>This file is a tab-separated file about diamonds and is part of the <code>ggplot2</code> R package.</p> <ul> <li>Raw data</li> <li>Data description</li> </ul> <p>The dataset has the following columns:</p> index name description 1 carat weight of the diamond (0.2--5.01) 2 cut quality of the cut (Fair, Good, Very Good, Premium, Ideal) 3 color diamond colour, from D (best) to J (worst) 4 clarity a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best)) 5 depth total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43--79) 6 table width of top of diamond relative to widest point (43--95) 7 price price in US dollars (\\(326--\\)18,823) 8 x length in mm (0--10.74) 9 y width in mm (0--58.9) 10 z depth in mm (0--31.8)"},{"location":"morning_session/filtering_on_values/#22-explore-the-data","title":"2.2. Explore the data","text":"<p>Using <code>awk</code> only:</p> <ul> <li>show the cut of the diamonds that have a price above $18000 USD</li> <li>show the price of the diamonds that have a fair cut and the worst color</li> <li>show the line number of the diamonds that have a price below $400 USD</li> </ul>"},{"location":"morning_session/filtering_on_values/#exercise-3-printing-a-complete-dataset","title":"Exercise 3: printing a complete dataset","text":""},{"location":"morning_session/filtering_on_values/#31-download-the-data","title":"3.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://raw.githubusercontent.com/richelbilderbeek/awk_course/master/data/diamonds.tsv\n</code></pre> <p>to download a file called <code>diamonds.tsv</code>.</p> <p>It is the same dataset as used earlier. However, it has a first line, which is called a header, which describes the data.</p>"},{"location":"morning_session/filtering_on_values/#32-explore-the-data","title":"3.2. Explore the data","text":"<p>Using <code>awk</code> only:</p> <ul> <li>show the number of lines, in any clumsy way</li> <li>show the number of columns, in any clumsy way</li> <li>show only the first line</li> <li>show only the first ten lines</li> <li>show the prices of all diamonds, while skipping the header</li> <li>show the cut of the diamonds that have a price above $18000 USD,   while skipping the header</li> <li>show the price of the diamonds that have a fair cut and the worst color,   while skipping the header</li> <li>show the line number of the diamonds that have a price below $400 USD,   while skipping the header</li> </ul> <p>Explain:</p> <ul> <li>although this dataset has a header, in not all exercises <code>NR &gt; 1</code> was needed.   When can <code>NR &gt; 1</code> be omitted safely?</li> </ul>"},{"location":"morning_session/introduction/","title":"Introduction","text":""},{"location":"morning_session/introduction/#exercises","title":"Exercises","text":""},{"location":"morning_session/introduction/#exercise-1-a-filter","title":"Exercise 1: a filter","text":"<p>Learning outcomes</p> <ul> <li>Use a filter</li> </ul> <p>Read of CLI text processing with GNU awk:</p> <ul> <li>chapter '3. Awk introduction', section 'Filtering'</li> </ul> <p>Answer these questions of that same chapter:</p> <ul> <li>1</li> </ul>"},{"location":"morning_session/introduction/#exercise-2-a-filter","title":"Exercise 2: a filter","text":"<p>Learning outcomes</p> <ul> <li>Rehearse using a filter</li> </ul> <p>Read of To awk or not:</p> <ul> <li>chapter '1.Simple examples', section 'Let's begin simple', until the first exercise</li> </ul> <p>Then do:</p> <ul> <li>the first exercise on that page:</li> </ul> <p>Try to run the above example for \"silver\". What is different? How can one fix it?</p>"},{"location":"morning_session/overview/","title":"AWK course","text":"<p>This module introduces the fundamentals of the AWK language.</p>"},{"location":"morning_session/overview/#schedule","title":"Schedule","text":"Time Topic 09:15-10:00 print, filtering on values 10:00-10:15 Break 10:15-11:00 BEGIN and END, variables 11:00-11:15 Break 11:15-12:00 working with comma-separated values, Associative arrays <p>The times in this schedules are only guidelines. The pace of the learners determines the speed of going through the course material.</p>"},{"location":"morning_session/overview/#overview","title":"Overview","text":"<pre><code>flowchart TD\n\n  print[Print]\n  filtering_on_values[Filtering on values]\n  begin_and_end[BEGIN and END]\n  variables[Variables]\n  associative_arrays[Associative arrays]\n  filtering_on_regex[Filtering on regular expressions]\n  comma_as_separator[Comma as a separator]\n\n  %% Facets of AWK\n  filtering_on_values --&gt; |needs| print\n  comma_as_separator --&gt; |needs| print\n  begin_and_end --&gt; |needs| filtering_on_values\n  variables --&gt; |needs| begin_and_end\n  associative_arrays --&gt; |needs| variables\n  filtering_on_regex --&gt; |needs| filtering_on_values</code></pre> Description Syntax Do an action <code>{ [action] }</code> Filtering <code>[condition] { [action] }</code> Multiple filters <code>[condition_1] { [action_1] } [condition_2] { [action_2] }</code> Actions at begin and end <code>BEGIN { [action]} [condition] { [action] } END { [action]}</code> <p>Overview of the Awk syntax built-up</p>"},{"location":"morning_session/overview/#links","title":"Links","text":"<ul> <li>CLI text processing with GNU awk</li> <li>To awk or not</li> </ul>"},{"location":"morning_session/print/","title":"print","text":"<p>Learning outcomes</p> <ul> <li>print a line</li> <li>print a column of a line</li> <li>print the line number</li> <li>print the number of columns</li> <li>print a multiplied value</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners can print a line</li> <li>Learners can print a column of a line</li> <li>Learners can print the line number</li> <li>Learners can print the number of columns</li> <li>Learners can print a multiplied value</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"morning_session/print/#overview","title":"Overview","text":"<p>AWK is great for printing parts of tabular data.</p> <p>In this session, we use AWK to print.</p>"},{"location":"morning_session/print/#exercises","title":"Exercises","text":"<p>See the exercise procedure.</p>"},{"location":"morning_session/print/#exercise-1-confirming-things-are-true","title":"Exercise 1: confirming things are true","text":"<p>Learning outcomes</p> <ul> <li>experience the many printing statements of <code>awk</code></li> </ul>"},{"location":"morning_session/print/#11-download-the-data","title":"1.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://pmitev.github.io/to-awk-or-not/data/coins.txt\n</code></pre> <p>to download a file called <code>coins.txt</code>.</p> <p>This file is a tab-separated file, with the following columns:</p> index description 1 metal 2 weight in ounces 3 data minted 4 country of origin 5 description"},{"location":"morning_session/print/#12-print","title":"1.2. <code>print</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, print the whole line'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#13-print-and-0","title":"1.3. <code>print</code> and <code>$0</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print $0 }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, print the whole line'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#14-1","title":"1.4. <code>$1</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print $1 }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, print the first column'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#15-multiple-columns","title":"1.5. Multiple columns","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print $1 $2 }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, print the first column and second column'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#16-multiple-columns-separated-by-a-space","title":"1.6. Multiple columns separated by a space","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print $1, $2 }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, print the first column and second column, separated by a space'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#17-nf","title":"1.7. <code>NF</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print NF }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, print the number of columns'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#18-nf","title":"1.8. <code>$NF</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print $NF }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, print the last column'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#19-nr","title":"1.9. <code>NR</code>","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print NR }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, print that line's number'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#110-convert","title":"1.10. Convert","text":"<p>The second column shows the weight in ounces. One ounce is 28.349523125 gram.</p> <p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print $2 * 28.349523125 }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, show the second column multiplied by 28.349523125'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#111-add-text","title":"1.11. Add text","text":"<p>The second column shows the weight in ounces. One ounce is 28.349523125 gram.</p> <p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ print $2 * 28.349523125, \"gram\" }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, show the second column multiplied by 28.349523125 and add the word 'gram' (separated by a whitespace)'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/print/#exercise-2-explore-data","title":"Exercise 2: explore data","text":""},{"location":"morning_session/print/#21-download-the-data","title":"2.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://raw.githubusercontent.com/richelbilderbeek/awk_course/master/data/diamonds_no_header.tsv\n</code></pre> <p>to download a file called <code>diamonds_no_header.tsv</code>.</p> <p>This file is a tab-separated file about diamonds and is part of the <code>ggplot2</code> R package.</p> <ul> <li>Raw data</li> <li>Data description</li> </ul> <p>The dataset has the following columns:</p> index name description 1 carat weight of the diamond (0.2--5.01) 2 cut quality of the cut (Fair, Good, Very Good, Premium, Ideal) 3 color diamond colour, from D (best) to J (worst) 4 clarity a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best)) 5 depth total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43--79) 6 table width of top of diamond relative to widest point (43--95) 7 price price in US dollars (\\(326--\\)18,823) 8 x length in mm (0--10.74) 9 y width in mm (0--58.9) 10 z depth in mm (0--31.8)"},{"location":"morning_session/print/#22-explore-the-data","title":"2.2. Explore the data","text":"<p>Using <code>awk</code> only:</p> <ul> <li>show the number of diamonds in the dataset (in any clumsy way!)</li> <li>show the number of columns in the dataset (in any clumsy way!)</li> <li>show the prices of the diamonds in US dollars</li> <li>show the prices of the diamonds in Swedish kroner,   assume 1 US dollar is 10.47 Swedish kroner</li> <li>show the weight of the diamonds in kilo, 1 carat is 0.0002 kilo</li> </ul> <p>Answer the question:</p> <ul> <li>At the start of this session, two ways to print all lines   were shown (<code>awk '{ print }' coins.txt</code> and <code>awk '{ print $0 }' coins.txt</code>).   Although they do exactly the same thing, why were both ways shown?</li> <li>All the AWK commands are put in single quotes. Why would that be?   Would double quotes work too?</li> </ul>"},{"location":"morning_session/variables/","title":"Variables","text":"<p>Learning outcomes</p> <ul> <li>use a variable</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners have practiced using a variable</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"morning_session/variables/#overview","title":"Overview","text":"<p>Sometimes we need AWK to remember things, for example, when summing values</p>"},{"location":"morning_session/variables/#exercises","title":"Exercises","text":"<p>See the exercise procedure.</p>"},{"location":"morning_session/variables/#exercise-1-confirming-things-are-true","title":"Exercise 1: confirming things are true","text":"<p>Learning outcomes</p> <ul> <li>experience variables</li> </ul>"},{"location":"morning_session/variables/#11-download-the-data","title":"1.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://pmitev.github.io/to-awk-or-not/data/coins.txt\n</code></pre> <p>to download a file called <code>coins.txt</code>.</p>"},{"location":"morning_session/variables/#12-sum","title":"1.2. Sum","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '{ sum = sum + $2 } END { print sum }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, add the value of the second column to the variable called <code>sum</code>. In the end, print the value of sum.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/variables/#13-get-the-maximum","title":"1.3. Get the maximum","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk '$2 &gt; max { max = $2 } END { print max }' coins.txt\n</code></pre> <p>In English, this is: 'For every line, if the value in the second column is bigger than the value of <code>max</code>, set <code>max</code> to the value in the second column. In the end, print the value of <code>max</code>.</p> <p>Confirm that this is true.</p> <p>What is the assumption about the values in the second column?</p> <p>The assumption about the values in the second column is that zero is the lowest possible value, as the initial value of <code>max</code> is zero.</p> <p>If, for example, all the values in the second column are negative, <code>max</code> will be zero.</p>"},{"location":"morning_session/variables/#exercise-2-explore-data","title":"Exercise 2: explore data","text":""},{"location":"morning_session/variables/#21-download-the-data","title":"2.1. Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://raw.githubusercontent.com/richelbilderbeek/awk_course/master/data/diamonds_no_header.tsv\n</code></pre> <p>to download a file called <code>diamonds_no_header.tsv</code>.</p> <p>This file is a tab-separated file about diamonds and is part of the <code>ggplot2</code> R package.</p> <ul> <li>Raw data</li> <li>Data description</li> </ul> <p>The dataset has the following columns:</p> index name description 1 carat weight of the diamond (0.2--5.01) 2 cut quality of the cut (Fair, Good, Very Good, Premium, Ideal) 3 color diamond colour, from D (best) to J (worst) 4 clarity a measurement of how clear the diamond is (I1 (worst), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (best)) 5 depth total depth percentage = z / mean(x, y) = 2 * z / (x + y) (43--79) 6 table width of top of diamond relative to widest point (43--95) 7 price price in US dollars (\\(326--\\)18,823) 8 x length in mm (0--10.74) 9 y width in mm (0--58.9) 10 z depth in mm (0--31.8)"},{"location":"morning_session/variables/#22-explore-the-data","title":"2.2 Explore the data","text":"<p>Using <code>awk</code> only:</p> <ul> <li>show the number of diamonds in the dataset</li> <li>show the number of columns in the dataset</li> <li>show the lowest price of all the diamonds</li> <li>show the average price of all the diamonds</li> <li>show the average price of all the diamonds with an ideal cut</li> <li>show the total weight of all diamonds combined in kilos,   1 carat is 0.0002 kilo</li> <li>show the prices of all the diamonds together, in Swedish kroner.   Assume 1 US dollar is 10.47 Swedish kroner</li> </ul>"},{"location":"morning_session/working_with_csvs/","title":"Working with CSVs","text":"<p>Learning outcomes</p> <ul> <li>use AWK on a CSV</li> </ul> For teachers <p>Teaching goals are:</p> <ul> <li>Learners can use AWK on a CSV</li> </ul> <p>Lesson plan:</p> <ul> <li>5 mins: prior knowledge</li> <li>5 mins: presentation</li> <li>15 mins: challenge</li> <li>5 mins: feedback</li> </ul>"},{"location":"morning_session/working_with_csvs/#overview","title":"Overview","text":"<p>In this session, we use AWK on a file with comma-separated values.</p>"},{"location":"morning_session/working_with_csvs/#exercises","title":"Exercises","text":"<p>In these exercises, we follow the exercise procedure.</p>"},{"location":"morning_session/working_with_csvs/#exercise-1-confirming-things-are-true","title":"Exercise 1: confirming things are true","text":"<p>Learning outcomes</p> <ul> <li>experience the ways to filter on column values of <code>awk</code></li> </ul>"},{"location":"morning_session/working_with_csvs/#download-the-data","title":"Download the data","text":"<p>In a terminal, do:</p> <pre><code>wget https://raw.githubusercontent.com/richelbilderbeek/awk_course/master/data/diamonds_raw.csv\n</code></pre> <p>to download a file called <code>diamonds_raw.csv</code>.</p>"},{"location":"morning_session/working_with_csvs/#mix-between-string-and-values","title":"mix between string and values","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk 'NR &lt; 10 { print $1 }' diamonds_raw.csv\n</code></pre> <p>In English, this is: 'For every line with a line number less than 10, print the first column's value'.</p> <p>Confirm that this is true if the columns are separated by a tab.</p>"},{"location":"morning_session/working_with_csvs/#mix-between-string-and-values-with-a-comma-as-a-separator","title":"mix between string and values with a comma as a separator","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk -F \",\" 'NR &lt; 10 { print $1 }' diamonds_raw.csv\n</code></pre> <p>In English, this is: 'Columns are separated by a comma. For every line with a line number less than 10, print the first column's value'.</p> <p>Confirm that this is true.</p>"},{"location":"morning_session/working_with_csvs/#multi-word-strings","title":"multi-word strings","text":"<p>In a terminal, in the same folder as where the data is downloaded, do:</p> <pre><code>awk -F \",\" 'NR &lt; 10 { print $2 }' diamonds_raw.csv\n</code></pre> <p>In English, this is: 'Columns are separated by a comma. For every line with a line number less than 10, print the seconds column's value'.</p> <p>Confirm that this is true.</p>"}]}